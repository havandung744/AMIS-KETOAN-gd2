{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  mounted() {\n    try {\n      var me = this;\n      axios.get(\"https://amis.manhnv.net/api/v1/Employees\").then(response => {\n        // console.log(response.data)})\n        me.employees = response.data;\n        buildTable(\"table thead th[propName]\", me.employees);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  },\n\n  methods: {\n    buildTable(tableElement, employees) {\n      try {\n        // clear dữ liệu cũ trước khi hiển thị ra\n        document.getElementById(\".d-table tbody\").empty(); // lấy ra thẻ th\n\n        let ths = tableElement;\n\n        for (const emp of employees) {\n          // let checkbox = $(`<td><input type=\"checkbox\" class=\"text-align-center\"></input><td>`);\n          let trHTML = `<tr></tr>`;\n\n          for (const th of ths) {\n            // lấy ra tên attribute được khai báo ở các thẻ input\n            var propName = th.getAttribute(\"propName\"); //lấy ra giá trị của các cột\n\n            var value = emp[propName]; //format lại dữ liệu lấy ra\n\n            thHTML = this.formatValue(value, propName); // thêm các th vào tr\n\n            $(trHTML).append(thHTML);\n          } // thêm tr vào body của table \n\n\n          $('table tbody').append(trHTML);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    formatValue(value, propName) {\n      try {\n        if (value == null) value = \"\";\n        var thHTML = `<td class=\"text-align-left\">${value}</td>`;\n\n        switch (propName) {\n          case \"DateOfBirth\":\n            {\n              if (value) {\n                value = this.formatDate(value, 2);\n                thHTML = `<td class=\"text-align-center\">${value}</td>`;\n              } else value = \"\";\n\n              break;\n            }\n\n          case \"IdentityDate\":\n            {\n              if (value) {\n                value = this.formatDate(value, 2);\n                thHTML = `<td class=\"text-align-center\">${value}</td>`;\n              } else value = \"\";\n\n              break;\n            }\n\n          case \"ModifiedDate\":\n            {\n              if (value) {\n                value = this.formatDate(value, 2);\n                thHTML = `<td class=\"text-align-center\">${value}</td>`;\n              } else value = \"\";\n\n              break;\n            }\n\n          case \"Salary\":\n            {\n              let salary = Math.round(Math.random() * 10 * 1000000);\n              value = this.formatSalary(salary);\n              thHTML = `<td class=\"text-align-right\">${value}</td>`;\n              break;\n            }\n\n          case \"checkbox\":\n            {\n              value = `<input type=\"checkbox\"></input>`;\n              thHTML = `<td class=\"text-align-center\">${value}</td>`;\n              break;\n            }\n\n          case \"function\":\n            {\n              value = ` <div class=\"d-function\"><div class=\"d-text\">Sửa</div><div class=\"icon_dropdown\"></div></div>`;\n              thHTML = `<td class=\"text-align-center\">${value}</td>`;\n              break;\n            }\n\n          default:\n            {\n              break;\n            }\n        }\n\n        return thHTML;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    formatDate(dateOfBirth) {\n      if (dateOfBirth) {\n        // chuyển từ dạng string sang dạng Date\n        dateOfBirth = new Date(dateOfBirth); // lấy ngày\n\n        let date = dateOfBirth.getDate(); // lấy tháng\n\n        let month = dateOfBirth.getMonth() + 1; // lấy năm\n\n        let year = dateOfBirth.getFullYear(); // thêm số 0 vào trước nếu chỉ có một kí tự\n\n        date = date < 10 ? `0${date}` : date;\n        month = month < 10 ? `0${month}` : month;\n        return `${year}-${month}-${date}`;\n      } else return \"\";\n    },\n\n    /**\r\n    * function dùng để định dạng lương theo VND\r\n    * @param {number} salary \r\n    * Author: HVDUNG (19/5/2022)\r\n    */\n    formatSalary(salary) {\n      try {\n        if (!salary) return \"\";else return Intl.NumberFormat('vi-VN', {\n          style: 'currency',\n          currency: 'VND'\n        }).format(salary);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","mounted","me","get","then","response","employees","data","buildTable","error","console","log","methods","tableElement","document","getElementById","empty","ths","emp","trHTML","th","propName","getAttribute","value","thHTML","formatValue","$","append","formatDate","salary","Math","round","random","formatSalary","dateOfBirth","Date","date","getDate","month","getMonth","year","getFullYear","Intl","NumberFormat","style","currency","format"],"sourceRoot":"","sources":["C:\\Users\\hdung\\source\\repos\\web2022_04\\Vue\\amis-ketoan\\src\\components\\page\\TableList.vue"],"sourcesContent":["<template>\r\n  \r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nexport default {\r\n    mounted() {\r\n          try {\r\n      var me = this;\r\n      axios.get(\"https://amis.manhnv.net/api/v1/Employees\").then((response) => {\r\n        // console.log(response.data)})\r\n        me.employees = response.data;\r\n        buildTable(\"table thead th[propName]\", me.employees);\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    },\r\n    methods: {\r\n     buildTable(tableElement, employees) {\r\n    try {   \r\n        // clear dữ liệu cũ trước khi hiển thị ra\r\n        document.getElementById(\".d-table tbody\").empty();\r\n        // lấy ra thẻ th\r\n        let ths = tableElement;\r\n        for (const emp of employees) {\r\n            // let checkbox = $(`<td><input type=\"checkbox\" class=\"text-align-center\"></input><td>`);\r\n            let trHTML = `<tr></tr>`;\r\n            for (const th of ths) {\r\n                // lấy ra tên attribute được khai báo ở các thẻ input\r\n                var propName = th.getAttribute(\"propName\");\r\n                //lấy ra giá trị của các cột\r\n                var value = emp[propName];\r\n                //format lại dữ liệu lấy ra\r\n                thHTML = this.formatValue(value, propName);\r\n                // thêm các th vào tr\r\n                $(trHTML).append(thHTML);\r\n            }\r\n            // thêm tr vào body của table \r\n            $('table tbody').append(trHTML);\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n},\r\nformatValue(value, propName) {\r\n    try {\r\n        if (value == null)\r\n            value = \"\";\r\n        var thHTML = `<td class=\"text-align-left\">${value}</td>`;\r\n        switch (propName) {\r\n            case \"DateOfBirth\":\r\n                {\r\n                    if (value) {\r\n                        value = this.formatDate(value, 2);\r\n                        thHTML = `<td class=\"text-align-center\">${value}</td>`;\r\n                    } else\r\n                        value = \"\";\r\n                    break;\r\n                }\r\n            case \"IdentityDate\":\r\n                {\r\n                    if (value) {\r\n                        value = this.formatDate(value, 2);\r\n                        thHTML = `<td class=\"text-align-center\">${value}</td>`;\r\n                    } else\r\n                        value = \"\";\r\n                    break;\r\n                }\r\n            case \"ModifiedDate\":\r\n                {\r\n                    if (value) {\r\n                        value = this.formatDate(value, 2);\r\n                        thHTML = `<td class=\"text-align-center\">${value}</td>`;\r\n                    } else\r\n                        value = \"\";\r\n                    break;\r\n                }\r\n            case \"Salary\":\r\n                {\r\n                    let salary = Math.round(Math.random() * 10 * 1000000);\r\n                    value = this.formatSalary(salary);\r\n                    thHTML = `<td class=\"text-align-right\">${value}</td>`;\r\n                    break;\r\n                }\r\n            case \"checkbox\":\r\n                {\r\n                    value = `<input type=\"checkbox\"></input>`;\r\n                    thHTML = `<td class=\"text-align-center\">${value}</td>`;\r\n                    break;\r\n                }\r\n            case \"function\":\r\n                {\r\n                    value = ` <div class=\"d-function\"><div class=\"d-text\">Sửa</div><div class=\"icon_dropdown\"></div></div>`;\r\n                    thHTML = `<td class=\"text-align-center\">${value}</td>`;\r\n                    break;\r\n                }\r\n            default:\r\n                {\r\n                    break;\r\n                }\r\n        }\r\n        return thHTML;\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n},\r\n\r\nformatDate(dateOfBirth) {\r\n        if (dateOfBirth) {\r\n            // chuyển từ dạng string sang dạng Date\r\n            dateOfBirth = new Date(dateOfBirth);\r\n            // lấy ngày\r\n            let date = dateOfBirth.getDate();\r\n            // lấy tháng\r\n            let month = dateOfBirth.getMonth() + 1;\r\n            // lấy năm\r\n            let year = dateOfBirth.getFullYear();\r\n            // thêm số 0 vào trước nếu chỉ có một kí tự\r\n            date = date < 10 ? `0${date}` : date;\r\n            month = month < 10 ? `0${month}` : month;\r\n                return `${year}-${month}-${date}`;    \r\n        } else\r\n            return \"\";\r\n    },\r\n    /**\r\n * function dùng để định dạng lương theo VND\r\n * @param {number} salary \r\n * Author: HVDUNG (19/5/2022)\r\n */\r\nformatSalary(salary) {\r\n    try {\r\n        if (!salary)\r\n            return \"\";\r\n        else\r\n            return Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(salary);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n}\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}